services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.prod
    image: api-gateway:1.0.5
    container_name: api-gateway-prod
    env_file: ./api-gateway/.env.prod
    ports:
      - "31000:5000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - supply-chain-prod
    restart: unless-stopped

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile.prod
    image: auth-service:1.0.5
    container_name: auth-service-prod
    env_file: ./auth-service/.env.prod
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - supply-chain-prod
    restart: unless-stopped

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile.prod
    image: notification-service:1.0.5
    container_name: notification-service-prod
    env_file: ./notification-service/.env.prod
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - supply-chain-prod
    restart: unless-stopped

  general-service:
    build:
      context: ./general-service
      dockerfile: Dockerfile.prod
    image: general-service:1.0.5
    container_name: general-service-prod
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - supply-chain-prod
    restart: unless-stopped
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile.prod
    image: inventory-service:1.0.5
    container_name: inventory-service-prod
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - supply-chain-prod
    restart: unless-stopped
  business-service:
    build:
      context: ./business-service
      dockerfile: Dockerfile.prod
    image: business-service:1.0.5
    container_name: business-service-prod
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    networks:
      - supply-chain-prod
    restart: unless-stopped
  operation-service:
    build:
      context: ./operation-service
      dockerfile: Dockerfile.prod
    image: operation-service:1.0.5
    container_name: operation-service-prod
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - supply-chain-prod
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq-prod
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5678:5672"
      - "15678:15672"
    volumes:
      - ./rabbitmq-data-prod:/var/lib/rabbitmq
    networks:
      - supply-chain-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6380:6379"
    volumes:
      - ./redis-data-prod:/data
    networks:
      - supply-chain-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5470:5432"
    volumes:
      - ./postgres-data-prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - supply-chain-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  supply-chain-prod:
    driver: bridge
